// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "nodedemo/v1/helllo_world.proto" (package "nodedemo.v1", syntax proto3)
// tslint:disable
//
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { HelloReply } from "./helllo_world";
import { HelloRequest } from "./helllo_world";
import type * as grpc from "@grpc/grpc-js";
/**
 * The greeting service definition.
 *
 * @generated from protobuf service nodedemo.v1.Greeter
 */
export interface IGreeter extends grpc.UntypedServiceImplementation {
    /**
     * Sends a greeting
     *
     * @generated from protobuf rpc: SayHello(nodedemo.v1.HelloRequest) returns (nodedemo.v1.HelloReply);
     */
    sayHello: grpc.handleUnaryCall<HelloRequest, HelloReply>;
}
/**
 * @grpc/grpc-js definition for the protobuf service nodedemo.v1.Greeter.
 *
 * Usage: Implement the interface IGreeter and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IGreeter = ...
 * server.addService(greeterDefinition, service);
 * ```
 */
export const greeterDefinition: grpc.ServiceDefinition<IGreeter> = {
    sayHello: {
        path: "/nodedemo.v1.Greeter/SayHello",
        originalName: "SayHello",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => HelloReply.fromBinary(bytes),
        requestDeserialize: bytes => HelloRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(HelloReply.toBinary(value)),
        requestSerialize: value => Buffer.from(HelloRequest.toBinary(value))
    }
};
